name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) 깃 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3) Gradle 캐시(옵션)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4) Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
        shell: bash

      # 5) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 6) Buildx 설정 (driver: docker-container)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:v0.11.3
          install: true
          use: true

      # 7) 백엔드 이미지 빌드 & Push
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .             # 백엔드 소스 위치 (예시)
          file: Dockerfile               # Dockerfile 이름
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/littlepet_backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/littlepet_backend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/littlepet_backend:cache,mode=max

      # 8) EC2 서버에 배포
      - name: Update Code & Restart Docker on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}           # EC2 퍼블릭 IP 또는 도메인
          username: ${{ secrets.EC2_USERNAME }}   # EC2 사용자명 (예: ubuntu)
          key: ${{ secrets.EC2_PRIVATE_KEY }}     # SSH 프라이빗 키 (레포지토리 Secrets)
          port: 22
          script: |
            cd /home/ubuntu        # docker-compose.yml이 위치한 경로
            docker-compose stop spring-boot-app
            
            docker-compose rm -f spring-boot-app

            # 기존 이미지 삭제 (옵션)
            docker rmi -f $(docker images ${{ secrets.DOCKER_USERNAME }}/littlepet_backend:latest -q) || true

            # 최신 이미지 pull
            docker-compose pull spring-boot-app

            # 백엔드 컨테이너 재실행
            docker-compose up -d spring-boot-app